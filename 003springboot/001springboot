1：Spring Boot快速入门：
    1.1：Spring Boot是在spring4.x框架基础上进行了封装，包括方便开发者进行配置管理和快速开发的模块，以及提供了一些开箱即用的工具，比如监控等。
    1.2：@SpringBootApplication相当于@Configuration、@EnableAutoConfiguration和  @ComponentScan，你也可以同时使用这3个注解。其中@Configuration、
        @ComponentScan是spring框架的语法，在spring 3.x就有了，用于代码方式创建配置信息和扫描包。@EnableAutoConfiguration是spring boot语法，表示将使用自动
        配置。你如果下载了spring boot源码，就会看到spring boot实现了很多starter应用，这些starter就是一些配置信息（有点类似于docker，一组环境一种应用的概念）
        ，spring boot看到引入的starter包，就可以计算如何自动配置你的应用。
    1.3：spring boot封装所有配置信息为键值类型，你想改变默认配置，只需要向应用传入这个键值对就可以，比如我们想改变绑定端口为8081，那么你在main方法里传入
        “—server.port=8081”即可，或者干脆使用：SpringApplication.run(SampleController.class, "--server.port=8081");
    1.4：pom文件中看到的spring-boot-maven-plugin插件就是打包spring boot应用的，打包完后才可以运行spring boot应用。
    1.5：Spring Boot的主要优点：提供各种默认配置来简化项目配置
    1.6：Spring boot提供的开箱即用的应用---比如监控：
        1.6.1：一个springboot应用如果想开启对他监控，需要在他的pom中引入<artifactId>spring-boot-starter-actuator</artifactId>，引入之后，spring boot是默认开
            启监控的，运行应用你可以在浏览器中输入：http://localhost:8080/health(访问应用的后面加/health)，就可以看到默认的监控信息了,信息包括程序执行状态以
            及基本的磁盘信息。

2：Spring Boot开发Web应用：
    2.1：Spring Boot提供了默认配置的模板引擎，使用Thymeleaf、FreeMarker、Velocity模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates
    2.2：Thymeleaf主要以属性的方式加入到html标签中，浏览器在解析html时，当检查到没有的属性时候会忽略，所以Thymeleaf的模板可以通过浏览器直接打开展现，这样非常
        有利于前后端的分离。

3：Spring Boot工程结构推荐
    com
      +- example
        +- myproject
          +- Application.java
          +- domain
          |  +- Customer.java
          |  +- CustomerRepository.java
          +- service
          |  +- CustomerService.java
          +- web
          |  +- CustomerController.java
5：  构建restful api：
    5.1：@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要
        再配置@ResponseBody，默认返回json格式。
6：swagger2：
    6.1：swagger2让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。Swagger2也提供了强大的页面测试功能来调试每个RESTful API
    6.2：Chpater3-1-5是我们的结果工程，可以参考
    6.3：使用过程：
        1：在pom.xml中加入Swagger2的依赖
        2：在Application.java同级创建Swagger2的配置类Swagger2
            @Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2
            本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）
        3：前面这样就可以生成文档了，但是对用户不友好
        4：我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明
7：Spring Boot中使用JdbcTemplate访问数据库：
    1：在pom.xml中引入spring-boot-starter-jdbc
    2：Spring Boot提供自动配置的嵌入式数据库有H2、HSQL、Derby，你不需要提供任何连接配置就能使用
        在pom.xml中引入如下配置使用HSQL
            <dependency>
                <groupId>org.hsqldb</groupId>
                <artifactId>hsqldb</artifactId>
                <scope>runtime</scope>
            </dependency>
    3：引入mysql数据源：
        在pom.xml中加入mysql-connector-java指定版本号
        src/main/resources/application.properties中配置数据源信息
            spring.datasource.url=jdbc:mysql://localhost:3306/test
            spring.datasource.username=dbuser
            spring.datasource.password=dbpass
            spring.datasource.driver-class-name=com.mysql.jdbc.Driver
    4：连接JNDI数据源：
        spring.datasource.jndi-name=java:jboss/datasources/customers
    5：使用JdbcTemplate操作数据库：
        Spring的JdbcTemplate是自动配置的，你可以直接使用@Autowired来注入到你自己的bean中来使用
            @Autowired
            private JdbcTemplate jdbcTemplate;

7:Spring-data-jpa让数据访问更简单、更优雅:
    1:Spring-data-jpa的出现正可以让这样一个已经很“薄”的数据访问层变成只是一层接口的编写方式,Spring-data-jpa依赖于Hibernate
    2:创建实体，由于配置了hibernate.hbm2ddl.auto，在应用启动的时候框架会自动去数据库中创建对应的表。
    3:只需要编写类似下面这样的接口就可实现数据访问
        public interface UserRepository extends JpaRepository<User, Long> {
              //这就是Spring-data-jpa的一大特性：通过解析方法名创建查询。
              User findByName(String name);
              User findByNameAndAge(String name, Integer age);

              //也提供通过使用@Query 注解来创建查询,编写JPQL语句
              @Query("from User u where u.name=:name")
              User findUser(@Param("name") String name);
          }
    4:Spring-data-jpa的能力远不止本文提到的这些，诸如@Modifying操作、分页排序、原生SQL支持以及与Spring MVC的结合使用等等都支持

8：Spring Boot多数据源配置与使用：
    1：一个项目中引入多个数据库的连接
    2：在DataSourceConfig中配置多个数据源，每个数据源使用application.properties中不同的数据库连接信息，不同的JdbcTemplate指定使用不同的数据源
        实例参见：完整示例:Chapter3-2-3
    3：沿用上例中DataSourceConfig的实现，一个数据源一个Configuration类用来指定Entity实体和Repository定义位置，不同数据源在不同的包下面创建自己
        的实体类和接口，完整示例:Chapter3-2-4：
9:Spring Boot日志管理:
    1：springboot的默认日志是Commons Logging，但是也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。
    2：我们可以通过两种方式切换至DEBUG级别：
        在运行命令后加入--debug标志，如：$ java -jar myapp.jar --debug
        在application.properties中配置debug=true，该属性值为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自
            己应用的日志并不会输出为DEBUG级别。
    3：日志输出到文件：
        在application.properties中配置logging.file或logging.path属性
            logging.file，设置文件，可以是绝对路径，也可以是相对路径。
            logging.path，设置目录，会在该目录下创建spring.log文件
        日志文件会在10Mb大小的时候被截断，产生新的日志文件，默认级别为：ERROR、WARN、INFO
    4：级别控制：
        application.properties中进行配置完成日志记录的级别控制。
            logging.level.com.didispace=DEBUG：com.didispace包下所有class以DEBUG级别输出
            logging.level.root=WARN：root日志以WARN级别输出
    5：自定义日志配置：
        日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件
            依然可以很好的支持日志控制和管理。
        根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
            Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
            Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
            Log4j2：log4j2-spring.xml, log4j2.xml
            JDK (Java Util Logging)：logging.properties
            Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml）
    6：自定义输出格式：
        在application.properties配置如下参数控制输出格式：
            logging.pattern.console：定义输出到控制台的样式（不支持JDK Logger）
            logging.pattern.file：定义输出到文件的样式（不支持JDK Logger）

10：Spring Boot中使用Redis数据库：
    1：pom中引入jar包，application.properties增加redis相关配置
    2：通过提供工具类操作redis，参见：chapter3-2-5
11：spring boot中使用mongodb：
    1：由于MongoDB存储数据的弱类型，适合存储一些多变json数据，如：与外系统交互时经常变化的JSON报文。而对于一些对数据有复杂的高事务性要求的操作，如：账户
        交易等就不适合使用MongoDB来存储
    2：也是引入jar，使用工具类来操作mongodb
12：Spring Boot中Web应用的统一异常处理：
    1：Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。

13：Spring Boot属性配置文件详解：参见chapter2-1-1
    1：在Spring Boot使用过程中，最直观的感受就是没有了原来自己整合Spring应用时繁多的XML配置文件，替代它的是在pom.xml中引入模块化的Starter POMs，其中各个
        模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在application.properties中完成一些属性配置就能开启各模块的应用。
    2：application.properties的使用，主要用来配置数据库连接、日志相关配置等
    3：自定义属性与加载：
        在配置文件中定义com.didispace.blog.title=Spring Boot教程
        在@Component修饰类的属性上面通过@Value("${属性名}")注解来加载对应的配置属性
    4：参数间的引用：
        com.didispace.blog.name=程序猿DD
        com.didispace.blog.title=Spring Boot教程
        com.didispace.blog.desc=${com.didispace.blog.name}正在努力写《${com.didispace.blog.title}》
    5：使用随机数：
        ${random}来产生int值、long值或者string字符串，来支持属性的随机值。
            # 随机字符串
            com.didispace.blog.value=${random.value}
            # 随机int
            com.didispace.blog.number=${random.int}
            # 随机long
            com.didispace.blog.bignumber=${random.long}
            # 10以内的随机数
            com.didispace.blog.test1=${random.int(10)}
            # 10-20的随机数
            com.didispace.blog.test2=${random.int[10,20]}
    6：通过命令行设置属性值：
        在命令行运行时，连续的两个减号--就是对application.properties中的属性值进行赋值的标识。所以，java -jar xxx.jar --server.port=8888命令，等价于我们
            在application.properties中添加属性server.port=8888
        但是这种方式很不安全，可以通过SpringApplication.setAddCommandLineProperties(false)来关闭命令行设置参数值的功能。
    7：多环境配置：
        application-dev.properties：开发环境
        application-test.properties：测试环境
        application-prod.properties：生产环境
        在application.properties文件设置spring.profiles.active=dev就会加载application-dev.properties配置文件内容，这是默认加载开发环境
            java -jar xxx.jar 加载开发环境
            java -jar xxx.jar --spring.profiles.active=test，加载测试环境
            java -jar xxx.jar --spring.profiles.active=prod，加载生产环境

14：使用@Scheduled创建定时任务：参见：Chapter4-1-1
    @Scheduled(fixedRate = 5000) ：上一次开始执行时间点之后5秒再执行
    @Scheduled(fixedDelay = 5000) ：上一次执行完毕时间点之后5秒再执行
    @Scheduled(initialDelay=1000, fixedRate=5000) ：第一次延迟1秒后执行，之后按fixedRate的规则每5秒执行一次
    @Scheduled(cron="*/5 * * * * *") ：通过cron表达式定义规则
15：@Async实现异步调用：参见Chapter4-1-2
    Spring Boot的主程序中配置@EnableAsync
    3个方法上面分别使用@Async注解，方法返回Future<String>
    while(true) {
    		if(task1.isDone() && task2.isDone() && task3.isDone()) {
    			// 三个任务都调用完成，退出循环等待
    			break;
    		}
    		Thread.sleep(1000);
    }





























