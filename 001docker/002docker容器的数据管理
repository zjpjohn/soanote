1、什么是数据卷data volume：
    数据卷是特殊设计的目录，可以为一个或多个容器提供访问，设计的目的是数据的永久化，完全独立于容器的生命周期，删除容器但它对应的数据卷目录数据等还会存在。
        本质是存放在宿主机上面的可以是目录也可以是文件，独立于docker的，可以利用他实现容器之间数据的共享和交换。数据卷在容器启动时候初始化。
2、数据卷的操作：
    2.1：创建数据卷：docker run 命令中增加，-v 宿主机目录:容器目录
        如果宿主机目录、容器目录不存在，执行这个命令创建容器时候会自动创建这两个目录。两边修改哪个目录下面的内容在另外一端都可以看到变化。
        docker inspect 容器名称：查看这个容器是否挂载了数据卷，也可以查看这个容器对某个数据卷的读写权限
    2.2：为容器对某个数据卷添加操作权限： -v 宿主机目录:容器目录:ro        这就添加了只读的操作权限，这个容器内对这个数据卷目录就只能读了
    2.3：利用dockerfile创建镜像时候，指定这个镜像生成的容器是具有数据卷功能的
        VOLUME["/data1,/data2"] dockerfile中利用VOLUME指令表示使用数据卷，那么利用他生成的镜像生成的容器内就会创建这样的目录，可以指定多个或一个，但是
            这个数据卷在宿主机上面对应的目录是/var/lib/docker/vfs/dir/uuid的一个目录，本质是指定了容器目录，宿主机目录动态生成。
        这样生成的不同容器不能共享数据，解决这个问题出现了数据卷容器。
    2.4：数据卷容器：
        2.4.1：创建一个特殊容器，他使用了数据卷，可以是docker run是指定的数据卷，也可以是dockerfile中指定的(然后镜像、镜像生成的容器)
        2.4.2：一个容器指定了数据卷，那么容器内部有目录，宿主机上面也有目录就固定好了，在容器内部修改目录中的内容
        2.4.3：docker run生成一个新容器时候，利用--volumes-from 上面容器名字(指定数据卷的容器)，这样这个容器就也指定了上面容器的数据卷，实现容器间共享数据
        2.4.4：本质是一个容器指定数据卷，其他容器都指向前面容器使用他的数据卷，这样这些容器就实现共享数据了
        2.4.5：docker inspect --format="{{.Volumes}}"  容器名字  ，查看容器的数据卷信息
        2.4.6：那个特殊指定数据卷的容器被删除后，其他容器还是有数据卷的他们还是指向磁盘同一个目录，这个目录还是存在的
        2.4.7：docker rm -v 容器名字 ，删除一个容器和他的数据卷目录，但是如果这个数据卷目录还有别的容器指向了那么是不会删除的
    2.5：数据卷技术实现数据的备份和还原：
        2.5.1：启动一个新的容器用来指向备份数据的命令
            docker run --volumes-from 需要备份的容器的名字 -v 备份文件存在在宿主机中的目录:备份文件存在在容器中的目录 --name 新容器名字  镜像文件
                tar cvf /backup/dvt5.rar /datavolume1(容器中的那个数据卷进行备份压缩)


======================================================================================================================================================
                                    docker容器的跨主机访问
======================================================================================================================================================
1、网桥方式实现跨宿主机的容器之间的连接：
    1.1：原理：在每个宿主机上面创建网桥，利用这个网桥连接宿主机的物理网卡和所有docker容器，保证不同宿主机上的容器在同一个网段就可以互相访问了。
    1.2：创建网桥
        网桥使用的是宿主机原来的ip地址，这样宿主机的eth0连接到网桥上面，那么这个eth0也不在有ip地址了
    1.3：修改docker守护进程的启动配置文件：
        -b指定使用自己创建的网桥
        --fixed-cidr，限制每个宿主机上面容器的ip范围段，不同的段保证不同宿主机上面的容器ip不会重复
    1.4:本质是：两个宿主机没有ip使用网桥做为ip，比如一个是55.5，一个是55.3，每个上面的docker分别使用这两个网桥，那么他们就可以互相访问了，为了避免ip冲突
        限定了每个docker上面创建容器的ip范围。
    1.5：特点是容器和宿主机的ip是在同一个网段的
2、使用Open vSwitch实现跨主机容器连接：
    2.1：open vswitch简称ovs，是一个多层虚拟交换机的开源软件。
    2.2：原理是每个宿主机上面利用ovs创建ovs网桥，这些ovs网桥利用gre隧道协议(点对点的在封装的技术)接口实现跨主机的网络连接，宿主机内每个ovs网桥跟docker的
        虚拟网桥要建立连接。
    2.3：不同网段的ip要想ping通，协议在宿主机的iptable的路由表中增加，不同源ip可以路由都目标ip去的配置
3、使用weave实现跨主机容器连接：
    3.1：weave是github上面的一个开源软件
    3.2：在每个宿主机上面下载安装启动weave，会分别在每个docker中创建一个weave容器
    3.3：使用weave命令来创建容器，并且可以指定这个容器的ip地址，这样不同宿主机上面的容器就可以通讯了














