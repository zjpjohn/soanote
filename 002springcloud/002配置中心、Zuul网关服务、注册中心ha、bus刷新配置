============================================================================================================
https://yq.aliyun.com/articles/60530?spm=5176.100239.blogcont60165.22.BLe1ws      zuul：网关服务
=============================================================================================================
1、为何使用网关服务：
        我们需要将权限控制这样的东西从我们的服务单元中抽离出去，而最适合这些逻辑的地方就是处于对外访问最前端的地方，我们需要一个更强大一些的均衡负载器，即网关
            服务。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud Netflix中的Zuul就
            担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的
            可复用性和可测试性。
2、测试使用过程：
     2.1：注册中心上面注册service-A和service-B两个服务
     2.2：网关服务中，引入依赖spring-cloud-starter-zuul、spring-cloud-starter-eureka，如果不是通过指定serviceId的方式，eureka依赖不需要，但是为了对服务集群细
            节的透明性，还是用serviceId来避免直接引用url的方式吧。
     2.3：主类使用@EnableZuulProxy注解开启Zuul
              @SpringCloudApplication注解，它整合了@SpringBootApplication、@EnableDiscoveryClient、@EnableCircuitBreake，主要目的还是简化配置。
      2.4：application.properties中配置Zuul应用的基础信息，如：应用名、服务端口等。
                 spring.application.name=api-gateway
                 server.port=5555
2.5：服务路由
         通过服务路由的功能，我们在对外提供服务的时候，只需要通过暴露Zuul中配置的调用地址就可以让调用方统一的来访问我们的服务，而不需要了解具体提供服务的主机
                信息了。
         方式1：通过url直接映射，我们可以如下配置：
                    # routes to url
                    zuul.routes.api-a-url.path=/api-a-url/**
                    zuul.routes.api-a-url.url=http://localhost:2222/
                    该配置，定义了，所有到Zuul的中规则为：/api-a-url/**的访问都映射到http://localhost:2222/上，也就是说当我们访问
                    http://localhost:5555/api-a-url/add?a=1&b=2的时候，Zuul会将该请求路由到：http://localhost:2222/add?a=1&b=2上。
         方式2：对serviceId的映射：
                通过url映射的方式对于Zuul来说，并不是特别友好，Zuul需要知道我们所有为服务的地址，才能完成所有的映射配置。而实际上，我们在实现微服务架构时，服务
                名与服务实例地址的关系在eureka server中已经存在了，所以只需要将Zuul注册到eureka server上去发现其他服务，我们就可以实现对serviceId的映射。例如，
                我们可以如下配置：
                      zuul.routes.api-a.path=/api-a/**
                      zuul.routes.api-a.serviceId=service-A
                      zuul.routes.api-b.path=/api-b/**
                      zuul.routes.api-b.serviceId=service-B
                      eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
2.6：接下来，我们将eureka-server、service-A、service-B以及这里用Zuul实现的服务网关启动起来，在eureka-server的控制页面中，我们可以看到分别注册了service-A、
        service-B以及api-gateway
2.7：尝试通过服务网关来访问service-A和service-B，根据配置的映射关系，分别访问下面的url
        http://localhost:5555/api-a/add?a=1&b=2：通过serviceId映射访问service-A中的add服务
        http://localhost:5555/api-b/add?a=1&b=2：通过serviceId映射访问service-B中的add服务
        http://localhost:5555/api-a-url/add?a=1&b=2：通过url映射访问service-A中的add服务
        推荐使用serviceId的映射方式，除了对Zuul维护上更加友好之外，serviceId映射方式还支持了断路器，对于服务故障的情况下，可以有效的防止故障蔓延到服务网关上
            而影响整个系统的对外服务
2.8：服务过滤：
        我们需要利用Zuul的过滤器来实现我们对外服务的安全控制，来使客户端只能访问它应该访问到的资源。在服务网关中定义过滤器只需要继承ZuulFilter抽象类实现其定
            义的四个抽象函数就可对请求进行拦截与过滤，比如下面的例子，定义了一个Zuul过滤器，实现了在请求被路由之前检查请求中是否有accessToken参数，若有就进行
            路由，若没有就拒绝访问，返回401 Unauthorized错误。
          @Override
          public Object run() {
           RequestContext ctx = RequestContext.getCurrentContext();
           HttpServletRequest request = ctx.getRequest();
           log.info(String.format("%s request to %s", request.getMethod(), request.getRequestURL().toString()));
           Object accessToken = request.getParameter("accessToken");
           if(accessToken == null) {
               log.warn("access token is empty");
               ctx.setSendZuulResponse(false); //令zuul过滤该请求，不对其进行路由
               ctx.setResponseStatusCode(401);
               //设置了其返回的错误码，当然我们也可以进一步优化我们的返回，比如，通过ctx.setResponseBody(body)对返回body内容进行编辑等
               return null;
           }
           log.info("access token ok");
           return null;
          }
        filterType：返回一个字符串代表过滤器的类型，在zuul中定义了四种不同生命周期的过滤器类型，具体如下：
        pre：可以在请求被路由之前调用
        routing：在路由请求时候被调用
        post：在routing和error过滤器之后被调用
        error：处理请求时发生错误时被调用
        filterOrder：通过int值来定义过滤器的执行顺序
        shouldFilter：返回一个boolean类型来判断该过滤器是否要执行，所以通过此函数可实现过滤器的开关。在上例中，我们直接返回true，所以该过滤器总是生效。
        run：过滤器的具体逻辑。需要注意，这里我们实现了自定义过滤器之后，还需要实例化该过滤器才能生效，我们只需要在应用主类中增加如下内容：
              @Bean
              public AccessFilter accessFilter() {
                    return new AccessFilter();
              }
2.9:启动该服务网关后，访问：
        http://localhost:5555/api-a/add?a=1&b=2：返回401错误
        http://localhost:5555/api-a/add?a=1&b=2&accessToken=token：正确路由到server-A，并返回计算内容
3.0:网关服务的重要性：
        不仅仅实现了路由功能来屏蔽诸多服务细节，更实现了服务级别、负载均衡的路由。也实现了接口权限校验与微服务业务逻辑的解耦。通过服务网关中的过滤器，在各
            生命周期中去校验请求的内容，将原本在对外服务层做的校验前移，保证了微服务的无状态性，同时降低了微服务的测试难度，让服务本身更集中关注业务逻辑的
            处理。实现了断路器，不会因为具体微服务的故障而导致服务网关的阻塞，依然可以对外服务。

================================================================================
                          周立---zuul：网关服务
=================================================================================
1、准备工作：下面配置是不用配置，可以访问注册中心上面所有微服务
    1.1：为了更贴近生产，我们首先配置Host
        127.0.0.1 gateway
    1.2：启动服务：microservice-discovery-eureka
    1.3：启动服务：microservice-provider-user
    1.4：新建microservice-api-gateway项目
        1.4.1：启动类中使用@EnableZuulProxy注解激活zuul
    1.5：配置文件：application.yml
        spring:
          application:
            name: microservice-api-gateway
        server:
          port: 8050
        eureka:
          instance:
            hostname: gateway
          client:
            serviceUrl:
              defaultZone: http://discovery:8761/eureka/
    1.6测试：
        http://localhost:8050/microservice-provider-user/1，这样可以访问microservice-provider-user服务中id=1的用户信息
        结论：http://GATEWAY:GATEWAY_PORT/想要访问的Eureka服务id的小写/**，将会访问到 http://想要访问的Eureka服务id的小写:该服务端口/**
2、自定义路径访问微服务：
    2.1：# 下面整个树都非必须，如果不配置，将默认使用 http://GATEWAY:GATEWAY_PORT/想要访问的Eureka服务id的小写/** 路由到：
        http://想要访问的Eureka服务id的小写:该服务端口/**
    zuul:
      routes:
        user:                                               # 可以随便写，在zuul上面唯一即可；当这里的值 = service-id时，service-id可以不写。
          path: /user/**                                    # 想要映射到的路径
          service-id: microservice-provider-user            # Eureka中的serviceId
    2.2：如何忽略某些服务？
        如果我们现在只想将microservice-consumer-movie-ribbon服务暴露给外部，microservice-provider-user不想暴露，那么应该怎么办呢？配置如下：
        zuul:
          ignored-services: microservice-provider-user          # 需要忽视的服务(配置后将不会被路由)
          routes:
            movie:                                              # 可以随便写，在zuul上面唯一即可；当这里的值 = service-id时，service-id可以不写。
              path: /movie/**                                   # 想要映射到的路径
              service-id: microservice-consumer-movie-ribbon-with-hystrix    # Eureka中的serviceId
    2.3：直接使用Zuul而不使用Eureka(可以但是不建议这么做，因为得手动地配置大量URL，不是很方便。)
        zuul:
          routes:
            movie:                        # 可以随便写
              path: /user/**
              url: http://localhost:8000/   # path路由到的地址，也就是访问http://localhost:8050/user/**会路由到http://localhost:8000/**
3、客户端一个请求中直接调用多个微服务的缺点：
    3.1：例如，亚马逊的产品最终页要请求数百个微服务。虽然一个客户端可以通过LAN发起很多个请求，但是在公网上这样会很没有效率，这个问题在移动互联网上尤为突出
        。这个方案同时会导致客户端代码非常复杂。
    3.2：另一个存在的问题是客户端直接请求微服务的协议可能并不是web友好型。应用应该在防火墙外采用类似HTTP或者WEBSocket协议。
    3.3：随着时间的推移，我们可能需要改变系统微服务目前的切分方案。例如，我们可能需要将两个服务合并或者将一个服务拆分为多个。但是，如果客户端直接与微服务
        交互， 那么这种重构就很难实施。
4、gateway提供粗粒度的接口他内部封装对多个微服务的调用，这种方式的优点：
    4.1：以产品最终页这个使用场景为例。API Gateway提供一个服务接口（/productdetails?productid=xxx）使得移动客户端可以在一个请求中检索到产品最终页的全部数
        据。API Gateway通过调用多个服务来处理这一个请求并返回结果，涉及产品信息、推荐、评论等。
    4.2：对于有些请求，API Gateway可以通过直接路由请求到对应的后端服务上的方式来处理。对于另外一些请求，它需要调用多个后端服务并合并结果来处理。
        API Gateway可能需要先通过授权服务来验证请求，然后在路由到后端服务。
    4.3：部分失败的处理：例如，如果是在产品详情页的推荐服务模块无响应，那么API Gateway应该返回剩下的其他信息给用户，因为这些信息也是有用的。推荐部分可以
        返回空，也可以返回固定的顶部10个给用户。但是，如果是产品信息服务无响应，那么API Gateway就应该给客户端返回一个错误。









